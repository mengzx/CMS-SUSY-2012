#include "basicPlots.h"
#include <vector>
#include <iostream>
#include <fstream>
#include "TH1D.h"
#include "TH2D.h"
#include "TLine.h"
#include "TFile.h"
#include "TString.h"
#include <stdio.h>
#include "TCanvas.h"
#include "TPad.h"
#include "TStyle.h"
#include "TLegend.h"

#include "tdrstyle.h"
#include "playHist2D.h"
#include "playHist1D.h"
#include "project2DHists.h"
#include "getTranslationFactor.h"
#include "menus.h"

using namespace std;

basicPlots::basicPlots(){}

TH1D* basicPlots::Hist1D( vector<TFile*> invf, vector<TString> vdirname, vector<TString> vhname, double inscale, int rebin, TString xAxisName, TString yAxisName, double xAxisRange1, double xAxisRange2) {

  playHist1D hf1d=playHist1D();

  TH1D *alT=hf1d.addHistForDiffFoldersFilesHists1D(invf, vdirname, vhname);

  TH1D* formatalT=hf1d.formatHist(alT, inscale, xAxisName, yAxisName, xAxisRange1, xAxisRange2, rebin );
  return formatalT;
}




TH1D* basicPlots::Hist2D( vector<TFile*> invf, vector<TString> vdirname, vector<TString> vhname, double inscale, int rebin, TString xAxisName, TString yAxisName, double xAxisRange1, double xAxisRange2, double lowy, double highy) {

  playHist2D hf2d=playHist2D();
  playHist1D hf1d=playHist1D();
  project2DHists pf=project2DHists();

  TH2D* hT=hf2d.addHistForDiffFoldersFilesHists2D( invf, vdirname, vhname );
  TH1D* hTalphaTSlices=pf.projectX( hT, lowy, highy );


  TH1D* formathT=hf1d.formatHist(hTalphaTSlices, inscale, xAxisName, yAxisName, xAxisRange1, xAxisRange2, rebin );

  return formathT;
}


vector<TH1D*> basicPlots::getHists( bool MuAddOrNot, TString HTBins, int whichpart, int rebin, TString xAxisName, TString yAxisName, double xAxisRange1, double xAxisRange2, int dataMC, TString whichplot, bool separateSample, TString singleMCsample, double lowy, double highy, int OneDTwoD ){

  getTranslationFactor tf=getTranslationFactor();
  playHist1D pf1d=playHist1D();

  TString dir;

  TString dir_truetauhad;
  if( whichpart == 1 ){
    dir = inidir_ + "rootfiles/hadronicSele" + subdir_;
  } else if ( whichpart != 1 && MuAddOrNot == true && normalEstimation_ == false){
    dir = inidir_ + "rootfiles/oneMuonSele/muonpT50GeV" + subdir_;
    if( plotTrueTauHad_ ){
      dir_truetauhad = inidir_ + "rootfiles/hadronicSele" + subdir_;
    }
  } else if ( whichpart !=1 && MuAddOrNot == false && normalEstimation_ == false){
    dir = inidir_ + "rootfiles/oneMuonSele/muonpT10GeV" + subdir_;
  } else if ( whichpart !=1 && normalEstimation_ == true){
    dir = inidir_ + "rootfiles/oneMuonSele/muonpT45GeV" + subdir_;
  }
    
  vector<TFile*> Datavf;
  vector<TFile*> MCvf;
  vector<TString> vdirname;
  vector<TString> vhname;
  vector<TFile*> MCvf_truetauhad;
  vector<TString> vdirname_truetauhad;
  vector<TString> vhname_truetauhad;

  if( whichpart == 1 ){
    if( dataMC == 1 ){
      Datavf=tf.Datavf_pushback(dir, signalDataset_, "HadSele"+signalTrig_, HTBins);
    } else if ( dataMC == 2 ){
      MCvf=tf.MCvf_pushback(dir, MCsample_, "HadSele"+signalTrig_, HTBins, separateSample, singleMCsample );
    } else if ( dataMC == 0){
      Datavf=tf.Datavf_pushback(dir, signalDataset_, "HadSele"+signalTrig_, HTBins);
      MCvf=tf.MCvf_pushback(dir, MCsample_, "HadSele"+signalTrig_, HTBins, separateSample, singleMCsample );
    }
    vdirname=tf.dirName_pushback(folderlabel_+"", HTBins);
    if( startNJet_ == 0 ){
      vhname.push_back(whichplot+"_CommJetgeq2_h_all");
    } else {
      for( int i=startNJet_; i< startNJet_+nJets_; i++ ){
	vhname.push_back( Form(whichplot+"_CommJetgeq2_h_%d", i ) );
      }
    }
  } else if ( whichpart != 1 && MuAddOrNot == true && normalEstimation_ == false ){
    if( dataMC == 1 ){
      Datavf=tf.Datavf_pushback(dir, HadTaudataset_, "MuonAdded"+HadTaucontrolTrig_, HTBins);
    } else if( dataMC == 2 ){
      MCvf=tf.MCvf_pushback(dir, MCsample_, "MuonAdded"+HadTaucontrolTrig_, HTBins, separateSample, singleMCsample );
    } else if( dataMC == 0 ){
      Datavf=tf.Datavf_pushback(dir, HadTaudataset_, "MuonAdded"+HadTaucontrolTrig_, HTBins);
      MCvf=tf.MCvf_pushback(dir, MCsample_, "MuonAdded"+HadTaucontrolTrig_, HTBins, separateSample, singleMCsample );
    }
    vdirname=tf.dirName_pushback(folderlabel_ + MuonNumber_, HTBins);
    if( startNJet_ == 0 ){
      vhname.push_back(whichplot+"_JetMugeq2_h_all");
    } else {
      for( int i=startNJet_; i< startNJet_+nJets_; i++ ){
	vhname.push_back( Form( whichplot+"_JetMugeq2_h_%d", i ) );
      }
    }
    if( plotTrueTauHad_ ){
      if( startNJet_ == 0 ){
	vhname_truetauhad.push_back(whichplot+"_CommJetgeq2_hasTrueTauHad_h_all");
      } else {
	for( int i=startNJet_; i< startNJet_+nJets_; i++ ){
	  vhname_truetauhad.push_back( Form( whichplot+"_CommJetgeq2_hasTrueTauHad_h_%d", i ) );
	}
      }
      MCvf_truetauhad=tf.MCvf_pushback(dir_truetauhad, MCsample_, "HadSele"+signalTrig_, HTBins, false, "");
      vdirname_truetauhad=tf.dirName_pushback(folderlabel_+"", HTBins);
    }
  } else if ( whichpart != 1 && MuAddOrNot == false && normalEstimation_ == false ){
    if( dataMC == 1){
      Datavf=tf.Datavf_pushback(dir, NotHadTaudataset_, "Muon"+NotHadTaucontrolTrig_, HTBins);
    } else if( dataMC == 2 ){
      MCvf=tf.MCvf_pushback(dir, MCsample_, "Muon"+NotHadTaucontrolTrig_, HTBins, separateSample, singleMCsample );
    } else if( dataMC == 0 ){
      Datavf=tf.Datavf_pushback(dir, NotHadTaudataset_, "Muon"+NotHadTaucontrolTrig_, HTBins);
      MCvf=tf.MCvf_pushback(dir, MCsample_, "Muon"+NotHadTaucontrolTrig_, HTBins, separateSample, singleMCsample );
    }
    vdirname=tf.dirName_pushback(folderlabel_ + MuonNumber_, HTBins);
    if( startNJet_ == 0 ){
      vhname.push_back(whichplot+"_CommJetgeq2_h_all");
    } else {
      for( int i=startNJet_; i< startNJet_+nJets_; i++ ){
	vhname.push_back( Form( whichplot+"_CommJetgeq2_h_%d", i ) );
      }
    }
  } else if ( whichpart != 1 && normalEstimation_ == true ) {
    if( dataMC == 1){
      Datavf=tf.Datavf_pushback(dir, controlDataset_, "Muon"+NormalcontrolTrig_, HTBins);
    } else if( dataMC == 2 ){
      MCvf=tf.MCvf_pushback(dir, MCsample_, "Muon"+NormalcontrolTrig_, HTBins, separateSample, singleMCsample );
    } else if(dataMC == 0 ){
      Datavf=tf.Datavf_pushback(dir, controlDataset_, "Muon"+NormalcontrolTrig_, HTBins);
      MCvf=tf.MCvf_pushback(dir, MCsample_, "Muon"+NormalcontrolTrig_, HTBins, separateSample, singleMCsample );
    }
    vdirname=tf.dirName_pushback(folderlabel_ + MuonNumber_, HTBins);
    if( startNJet_ == 0 ){
      vhname.push_back(whichplot+"_CommJetgeq2_h_all");
    } else {
      for( int i=startNJet_; i< startNJet_+nJets_; i++ ){
	vhname.push_back( Form( whichplot+"_CommJetgeq2_h_%d", i ) );
      }
    }
  }

  TH1D* MCh=0;
  TH1D* Datah=0;
  TH1D* MCh_truetau=0;
  vector<TH1D*> vh;

  if( OneDTwoD == 1 ){
    if( dataMC == 1 ){
      Datah=Hist1D( Datavf, vdirname, vhname, datascale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2 );
      vh.push_back( Datah );
    } else if( dataMC == 2 ){
      MCh=Hist1D(  MCvf, vdirname, vhname, mcscale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2 );
      vh.push_back( MCh );
      if( plotTrueTauHad_ ){
	MCh_truetau=Hist1D(  MCvf_truetauhad, vdirname_truetauhad, vhname_truetauhad, mcscale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2 );
	vh.push_back( MCh_truetau );
      }
    } else if( dataMC == 0){
      Datah=Hist1D( Datavf, vdirname, vhname, datascale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2 );
      MCh=Hist1D(  MCvf, vdirname, vhname, mcscale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2 );
      vh.push_back( MCh );
      vh.push_back( Datah );
      if( plotTrueTauHad_ ){
	MCh_truetau=Hist1D(  MCvf_truetauhad, vdirname_truetauhad, vhname_truetauhad, mcscale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2 );
	vh.push_back( MCh_truetau );
      }
    }
  } else if( OneDTwoD == 2 ) {
    if( dataMC == 1 ){
      Datah=Hist2D( Datavf, vdirname, vhname, datascale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, lowy, highy );
      vh.push_back( Datah );
    } else if( dataMC == 2 ){
      MCh=Hist2D(  MCvf, vdirname, vhname, mcscale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, lowy, highy );
      vh.push_back( MCh );
      if( plotTrueTauHad_ ){
	MCh_truetau=Hist2D(  MCvf_truetauhad, vdirname_truetauhad, vhname_truetauhad, mcscale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, lowy, highy );
	vh.push_back( MCh_truetau );
      }
    } else if( dataMC == 0){
      Datah=Hist2D( Datavf, vdirname, vhname, datascale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, lowy, highy );
      MCh=Hist2D(  MCvf, vdirname, vhname, mcscale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, lowy, highy );
      vh.push_back( MCh );
      vh.push_back( Datah );
      if( plotTrueTauHad_ ){
	MCh_truetau=Hist2D(  MCvf_truetauhad, vdirname_truetauhad, vhname_truetauhad, mcscale_, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, lowy, highy );
	vh.push_back( MCh_truetau );
      }
    }
  }

  return vh;
}





void basicPlots::drawHists( bool MuAddOrNot, TString HTBins, int whichpart, int rebin, TString xAxisName, TString yAxisName, double xAxisRange1, double xAxisRange2, TString whichplot, TLegend *len, double lowy, double highy, int OneDTwoD ){

  TCanvas *c1=new TCanvas();

  getTranslationFactor tf=getTranslationFactor();
  playHist1D pf1d=playHist1D();

  TH1D *Datah= (getHists( MuAddOrNot, HTBins, whichpart, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, 1, whichplot, false, "", lowy, highy, OneDTwoD ))[0];
  TH1D *MCh_total= (getHists( MuAddOrNot, HTBins, whichpart, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, 2, whichplot, false, "", lowy, highy, OneDTwoD ))[0];
  //  TH1D *MCh_Zinv= (getHists( MuAddOrNot, HTBins, whichpart, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, 2, whichplot, true, "Zinv", lowy, highy, OneDTwoD ))[0];
  TH1D *MCh_TT= (getHists( MuAddOrNot, HTBins, whichpart, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, 2, whichplot, true, "TT", lowy, highy, OneDTwoD ))[0];
  TH1D *MCh_DY= (getHists( MuAddOrNot, HTBins, whichpart, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, 2, whichplot, true, "DY", lowy, highy, OneDTwoD ))[0];
  TH1D *MCh_WJ= (getHists( MuAddOrNot, HTBins, whichpart, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, 2, whichplot, true, "WJ", lowy, highy, OneDTwoD ))[0];
  //  TH1D *MCh_DiBoson= (getHists( MuAddOrNot, HTBins, whichpart, rebin, xAxisName, yAxisName, xAxisRange1, xAxisRange2, 2, whichplot, true, "DiBoson", lowy, highy, OneDTwoD ))[0];

  vector<TString> vlenname;
  vlenname.push_back("Data");
  vlenname.push_back("Total MC");
  //  vlenname.push_back("Z#rightarrow#nu#nu+jets");
  vlenname.push_back("W+jets");
  vlenname.push_back("Drell-Yan");
  vlenname.push_back("T#bar{T}");
  //  vlenname.push_back("Di-Boson");

  vector<TH1D*> vh;
  vh.push_back(Datah);
  vh.push_back(MCh_total);
  //  vh.push_back(MCh_Zinv);
  vh.push_back(MCh_WJ);
  vh.push_back(MCh_DY);
  vh.push_back(MCh_TT);
  //  vh.push_back(MCh_DiBoson);

  vector<TH1D*> svh=pf1d.SortHists(vh);
  vector<unsigned int> svh_index=pf1d.SortHists_index(vh);

  c1->cd();
  TPad *pad1=new TPad("pad1","",0,0.3,1,1);
  pad1->SetBottomMargin(0.009);
  pad1->Draw();
  pad1->cd();

  TH1D* svh0clone=(TH1D*)(svh[0]->Clone("svh0clone"));
  svh0clone->Sumw2();
  svh0clone->Scale(1.3);
  svh0clone->SetLineColor(0);
  svh0clone->SetMarkerColor(0);
  svh0clone->Draw();

  for( unsigned int i=0; i<svh.size(); i++ ){
    cout<< "i="<<i<<"  svh_index[i]="<<svh_index[i]<<endl;
    if( svh_index[i] != 0 && svh_index[i] != 1){
      if( i != 5 ){
	if( svh_index[i] == 2 ){
        svh[i]->Draw("same HIST 9");
	svh[i]->SetLineColor(2);
        svh[i]->SetFillColor(2);
	svh[i]->SetMarkerColor(2);
	} else if( svh_index[i] == 3 ){
        svh[i]->Draw("same HIST 9");
	svh[i]->SetLineColor(3);
        svh[i]->SetFillColor(3);
	svh[i]->SetMarkerColor(3);
	} else if( svh_index[i] == 4 ){
        svh[i]->Draw("same HIST 9");
	svh[i]->SetLineColor(4);
        svh[i]->SetFillColor(4);
	svh[i]->SetMarkerColor(4);
	}
      } else {
        svh[i]->Draw("same HIST 9");
	svh[i]->SetLineColor( kOrange -1 );
        svh[i]->SetFillColor(  kOrange -1 );
	svh[i]->SetMarkerColor( kOrange -1 );
      }
    } else if( svh_index[i] == 1 ){
      svh[i]->SetLineColor(5);
      svh[i]->SetFillColor(5);
      //      svh[i]->SetFillStyle(3007);
      svh[i]->SetMarkerColor(5);
      svh[i]->Draw("same E2 HIST");
    }
  }

  for( unsigned int i=0; i<svh.size(); i++ ){
   if( svh_index[i] == 0 ){
      svh[i]->Draw("same P 9");
      svh[i]->SetLineColor(1);
      svh[i]->SetLineWidth(2);
      svh[i]->SetMarkerSize(1.5);
      svh[i]->SetMarkerStyle(20);
      svh[i]->SetMarkerColor(1);
    }
  }

  len->AddEntry(vh[0], "Data");

  for( unsigned int i=0; i<svh.size(); i++ ){
    if( svh_index[i] != 0 && svh_index[i] != 1){
      len->AddEntry(vh[ svh_index[i] ], vlenname[ svh_index[i] ]);
    }
  }

  len->AddEntry(vh[1], "Total MC");

  len->Draw();

  c1->cd();
  TPad *pad2=new TPad("pad2","",0,0.03,1,0.3);
  pad2->SetTopMargin(0.05);
  //  pad2->SetBottomMargin(0.1);
  pad2->Draw();
  pad2->cd();

  for( unsigned int i=0; i<svh.size(); i++ ){
    TH1D* datah=(TH1D*)(svh[0]->Clone("datah"));
    TH1D* mch=(TH1D*)(svh[0]->Clone("mch"));
    if( svh_index[i] == 0 ){
      datah=(TH1D*)(svh[i]->Clone("datah"));
    }
    if( svh_index[i] == 1 ){
      mch=(TH1D*)(svh[i]->Clone("datah"));
    }
    TH1D *h1=(TH1D*)(datah->Clone("h1"));
    mch->Scale(-1.);
    h1->Add(h1,mch);
    datah->Divide(h1, datah);
    datah->GetXaxis()->SetTitle(xAxisName);
    datah->GetXaxis()->SetTitleSize(0.06);
    datah->GetYaxis()->SetTitle("(Data-MC)/Data");
    datah->GetYaxis()->SetRangeUser(-1.,1.);
    datah->GetYaxis()->SetTitleSize(0.06);
    datah->GetYaxis()->SetTitleOffset(0.5);
    datah->SetMarkerSize(0.5);
    datah->Draw("e1");
  }

  if( whichpart == 1 ){
    pad1->SetLogy(0);
    c1->SaveAs( Form( whichplot+"_HadSele_%s_%iTo%ib.eps",  HTBins.Data(), startNJet_-1, nJets_+startNJet_-2 ) );
    pad1->SetLogy();
    c1->SaveAs( Form( whichplot+"_HadSele_%s_%iTo%ib_log.eps",  HTBins.Data(), startNJet_-1, nJets_+startNJet_-2 ) );
  } else if ( whichpart != 1 && MuAddOrNot == true && normalEstimation_ == false ){
    pad1->SetLogy(0);
    c1->SaveAs( Form( whichplot+"_MuonAdded_%s_TrueTauHad%d_%s_%iTo%ib.eps", HTBins.Data(), (int)(plotTrueTauHad_), HadTaucontrolTrig_.Data(), startNJet_-1, nJets_-startNJet_+1 ) );
    pad1->SetLogy();
    c1->SaveAs( Form( whichplot+"_MuonAdded_%s_TrueTauHad%d_%s_%iTo%ib_log.eps",  HTBins.Data(), (int)(plotTrueTauHad_), HadTaucontrolTrig_.Data(), startNJet_-1, nJets_-startNJet_+1  ) );
  } else if ( whichpart !=1 && MuAddOrNot == false  && normalEstimation_ == false ){
    pad1->SetLogy(0);
    c1->SaveAs( Form( whichplot+"_MuonNotAdded_%s_%iTo%ib.eps", HTBins.Data(), startNJet_-1, nJets_+startNJet_-2 ) );
    pad1->SetLogy();
    c1->SaveAs( Form( whichplot+"_MuonNotAdded_%s_%iTo%ib_log.eps",  HTBins.Data(), startNJet_-1, nJets_+startNJet_-2 ) );
  } else if ( normalEstimation_ == true ){
    pad1->SetLogy(0);
    c1->SaveAs( Form( whichplot+"_Muon_%s_%s%iTo%ib.eps", HTBins.Data(), MuonNumber_.Data(), startNJet_-1, nJets_+startNJet_-2 ) );
    pad1->SetLogy();
    c1->SaveAs( Form( whichplot+"_Muon_%s_%s%iTo%ib_log.eps",  HTBins.Data(), MuonNumber_.Data(), startNJet_-1, nJets_+startNJet_-2 ) );
  }

  len->Clear();
}




/*void basicPlots::DrawHists( bool MuAddOrNot, TString HTBins, int whichpart, TString whichplot, int rebin, double lowalphaT, double highalphaT ){ // whichpart: if == 1 ==> numberator, if == 2 ==> dominator

  TCanvas *c1=new TCanvas();

  if( whichplot == "HT"){
    TH1D* MCh=HT( MCvf, vdirname, vhname_HT, mcscale_, rebin, lowalphaT, highalphaT );
    TH1D* Datah=HT( Datavf, vdirname, vhname_HT, datascale_, rebin, lowalphaT, highalphaT );

    vector<TH1D*> vh;
    vh.push_back(MCh);
    vh.push_back(Datah);

    TLegend *len=new TLegend( 0.75, 0.75, 0.85, 0.85 );

    TH1D* maxh=pf1d.MaxHist( vh );
    maxh->Draw();
    MCh->Draw("same");
    MCh->SetLineColor(2);
    MCh->SetMarkerColor(2);
    MCh->SetMarkerStyle(22);
    len->AddEntry(MCh, "Total MC");
    Datah->Draw("same");
    Datah->SetMarkerStyle(24);
    len->AddEntry(Datah, "Data");
    len->Draw();

    if( whichpart == 1 ){
      c1->SetLogy(0);
      c1->SaveAs( Form( "HT_HadSele_AT%dTo%d.eps", (int)(lowalphaT*100), (int)(highalphaT*100) ) );
      c1->SetLogy();
      c1->SaveAs( Form( "HT_HadSele_AT%dTo%d_log.eps", (int)(lowalphaT*100), (int)(highalphaT*100) ) );
    } else if ( whichpart != 1 && MuAddOrNot == true && normalEstimation_ == false ){
      c1->SetLogy(0);
      c1->SaveAs( Form( "HT_MuonAdded_AT%dTo%d_%s.eps", (int)(lowalphaT*100), (int)(highalphaT*100), HadTaucontrolTrig_.Data() ) );
      c1->SetLogy();
      c1->SaveAs( Form( "HT_MuonAdded_AT%dTo%d_%s_log.eps", (int)(lowalphaT*100), (int)(highalphaT*100), HadTaucontrolTrig_.Data() ) );
    } else if ( whichpart !=1 && MuAddOrNot == false && normalEstimation_ == false ){
      c1->SetLogy(0);
      c1->SaveAs( Form( "HT_MuonNotAdded_AT%dTo%d.eps", (int)(lowalphaT*100), (int)(highalphaT*100) ) );
      c1->SetLogy();
      c1->SaveAs( Form( "HT_MuonNotAdded_AT%dTo%d_log.eps", (int)(lowalphaT*100), (int)(highalphaT*100) ) );
    } else if ( whichpart !=1  && normalEstimation_ == true ){
      c1->SetLogy(0);
      c1->SaveAs( Form( "HT_AT%dTo%d.eps", (int)(lowalphaT*100), (int)(highalphaT*100) ) );
      c1->SetLogy();
      c1->SaveAs( Form( "HT_AT%dTo%d_log.eps", (int)(lowalphaT*100), (int)(highalphaT*100) ) );
    }

  }
  }*/


void basicPlots::getResults(){
  TLegend *len=new TLegend(0.75, 0.75, 0.90, .90);
  len->SetFillColor(0);
  len->SetLineColor(0);
  int whichpart=1;
  bool MuAddOrNot=true;
  int rebin=20;
  /*  drawHists( MuAddOrNot, "all", whichpart, rebin, "HT (GeV)", "", 0., 1500, "HT", len, 0.55, 10., 2 );
  drawHists( MuAddOrNot, "all", whichpart, rebin, "MHT (GeV)", "", 0, 800, "MHT", len, 0.55, 10, 2);
  drawHists( MuAddOrNot, "all", whichpart, rebin, "MHT/MET", "", 0, 3, "MHToverMET", len, 0.55, 10, 2);
  rebin=1;
  drawHists( MuAddOrNot, "all", whichpart, rebin, "Number of b-jets", "", 0, 15, "nbjet", len, 0.55, 10, 2);
  drawHists( MuAddOrNot, "all", whichpart, rebin, "Number of jets", "", 0, 15, "njet", len, 0.55, 10, 2);
  drawHists( MuAddOrNot, "all", whichpart, rebin, "Number of Vertex", "", 0, 50 , "nVertex", len, 0.55, 10, 2);
  drawHists( MuAddOrNot, "all", whichpart, rebin, "#alpha_{T}", "", 0.5, 1.2, "AlphaT", len, 0, 0, 1);
  */

  whichpart=2;
  MuAddOrNot=false;
  rebin=0;
  // drawHists( MuAddOrNot, "all", whichpart, rebin, "M_{Z} (GeV)", "", 0., 600, "Zmass", len, 0, 10., 2 );
  //  drawHists( MuAddOrNot, "all", whichpart, rebin, "#mu p_{T} (GeV)", "", 0., 600, "muPt", len, 0, 10., 2 );
  //  drawHists( MuAddOrNot, "all", whichpart, rebin, "HT (GeV)", "", 0., 1500, "HT", len, 0, 10., 2 );
  //  drawHists( MuAddOrNot, "all", whichpart, rebin, "MHT (GeV)", "", 0, 800, "MHT", len, 0, 10, 2);
  //  drawHists( MuAddOrNot, "all", whichpart, rebin, "MHT/MET", "", 0, 3, "MHToverMET", len, 0, 10, 2);

  rebin=1;
  //  drawHists( MuAddOrNot, "all", whichpart, rebin, "Number of jets", "", 0, 15, "njet", len, 0, 10, 2);
  //  drawHists( MuAddOrNot, "all", whichpart, rebin, "Number of b-jets", "", 0, 15, "nbjet", len, 0, 10, 2);
  //  drawHists( MuAddOrNot, "all", whichpart, rebin, "Number of Vertex", "", 0, 50 , "nVertex", len, 0, 10, 2);
  rebin=4;
  drawHists( MuAddOrNot, "all", whichpart, rebin, "#alpha_{T}", "", 0.2, 2.0, "AlphaT", len, 0, 0, 1);


}
